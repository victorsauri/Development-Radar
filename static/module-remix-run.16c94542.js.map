{"version":3,"file":"static/module-remix-run.16c94542.js","mappings":"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","sources":["webpack://app/./node_modules/@remix-run/router/dist/router.js"],"sourcesContent":["/**\n * @remix-run/router v1.6.2\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref,\n\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\nfunction parsePath(path) {\n  let parsedPath = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex(); // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n\n    createHref(to) {\n      return createHref(window, to);\n    },\n\n    createURL,\n\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n\n    push,\n    replace,\n\n    go(n) {\n      return globalHistory.go(n);\n    }\n\n  };\n  return history;\n} //#endregion\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (manifest === void 0) {\n    manifest = {};\n  }\n\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n\n  routes.forEach((route, index) => {\n    var _route$path;\n\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\n\n\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments; // Optional path segments are denoted by a trailing `?`\n\n  let isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\"))); // Then if this is an optional value, add all child versions without\n\n  if (isOptional) {\n    result.push(...restExploded);\n  } // for absolute paths, ensure `/` instead of empty segment\n\n\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\n\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  let path = originalPath;\n\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  } // ensure `/` is added at the beginning if the path is absolute\n\n\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1; // only apply the splat if it's the last segment\n\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      const starParam = params[star]; // Apply the splat\n\n      return starParam;\n    }\n\n    const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n\n      if (optional === \"?\") {\n        return param == null ? \"\" : param;\n      }\n\n      if (param == null) {\n        invariant(false, \"Missing \\\":\" + key + \"\\\" param\");\n      }\n\n      return param;\n    } // Remove any optional markers from optional static segments\n\n\n    return segment.replace(/\\?$/g, \"\");\n  }) // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n/**\n * @private\n */\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  let to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, null, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal) {\n    let aborted = false;\n\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n\n}\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  let responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\nclass ErrorResponse {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\n\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n}); //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  } // Routes keyed by ID\n\n\n  let manifest = {}; // Routes in tree format for matching\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\"; // Config driven behavior flags\n\n  let future = _extends({\n    v7_normalizeFormMethod: false,\n    v7_prependBasename: false\n  }, init.future); // Cleanup function for history\n\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n\n  let initialized = // All initialMatches need to be loaded before we're ready.  If we have lazy\n  // functions around still then we'll need to run them in initialize()\n  !initialMatches.some(m => m.route.lazy) && ( // And we have to either have no loaders or have been provided hydrationData\n  !initialMatches.some(m => m.route.loader) || init.hydrationData != null);\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n\n  let blockerFunctions = new Map(); // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n\n  let ignoreNextHistoryUpdate = false; // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1); // Put the blocker into a blocked state\n\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            }); // Re-do the same POP navigation we just blocked\n\n            init.history.go(delta);\n          },\n\n          reset() {\n            deleteBlocker(blockerKey);\n            updateState({\n              blockers: new Map(router.state.blockers)\n            });\n          }\n\n        });\n        return;\n      }\n\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState) {\n    var _location$state, _location$state2;\n\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    } // Always preserve any existing loaderData from re-used routes\n\n\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData; // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    } // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n\n\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers: new Map(state.blockers)\n    }));\n\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ; else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          }); // Send the same navigation through\n\n          navigate(to, opts);\n        },\n\n        reset() {\n          deleteBlocker(blockerKey);\n          updateState({\n            blockers: new Map(state.blockers)\n          });\n        }\n\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(routesToUse); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    } // Short circuit if it's only a hash change and not a mutation submission.\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".\n    // For example, on /page#hash and submit a <Form method=\"post\"> which will\n    // default to a navigation to /page\n\n\n    if (state.initialized && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation = _extends({\n        state: \"loading\",\n        location\n      }, opts.submission);\n\n      loadingNavigation = navigation; // Create a GET request for the loaders\n\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    } // Call loaders\n\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, pendingActionData, pendingError);\n\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  async function handleAction(request, location, submission, matches, opts) {\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = _extends({\n      state: \"submitting\",\n      location\n    }, submission);\n\n    updateState({\n      navigation\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename);\n\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace;\n\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n\n    if (!loadingNavigation) {\n      let navigation = _extends({\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      }, submission);\n\n      loadingNavigation = navigation;\n    } // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n\n\n    let activeSubmission = submission || fetcherSubmission ? submission || fetcherSubmission : loadingNavigation.formMethod && loadingNavigation.formAction && loadingNavigation.formData && loadingNavigation.formEncType ? {\n      formMethod: loadingNavigation.formMethod,\n      formAction: loadingNavigation.formAction,\n      formData: loadingNavigation.formData,\n      formEncType: loadingNavigation.formEncType\n    } : undefined;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, pendingActionData, pendingError); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId)); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}, updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n\n\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true\n        };\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(rf => {\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    }); // Proxy navigation abort through to revalidation fetchers\n\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key)); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }));\n      return;\n    }\n\n    let {\n      path,\n      submission\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    } // Put this fetcher into it's submitting state\n\n\n    let existingFetcher = state.fetchers.get(key);\n\n    let fetcher = _extends({\n      state: \"submitting\"\n    }, submission, {\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename);\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n\n      let loadingFetcher = _extends({\n        state: \"loading\"\n      }, submission, {\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true\n      });\n\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n      return startRedirectNavigation(state, actionResult, {\n        submission,\n        isFetchActionRedirect: true\n      });\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = _extends({\n      state: \"loading\",\n      data: actionResult.data\n    }, submission, {\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, {\n      [match.route.id]: actionResult.data\n    }, undefined // No need to send through errors since we short circuit above\n    ); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = {\n        state: \"loading\",\n        data: existingFetcher && existingFetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(staleKey, revalidatingFetcher);\n\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    let doneFetcher = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true\n    };\n    state.fetchers.set(key, doneFetcher);\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)\n      }, didAbortFetchLoads ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  async function handleFetcherLoader(key, routeId, path, match, matches, submission) {\n    let existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n    let loadingFetcher = _extends({\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    }, submission, {\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, mapRouteProperties, basename); // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n\n    if (isRedirectResult(result)) {\n      fetchRedirectIds.add(key);\n      await startRedirectNavigation(state, result);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    let doneFetcher = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  async function startRedirectNavigation(state, redirect, _temp) {\n    var _window;\n\n    let {\n      submission,\n      replace,\n      isFetchActionRedirect\n    } = _temp === void 0 ? {} : _temp;\n\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location, // TODO: This can be removed once we get rid of useTransition in Remix v2\n    _extends({\n      _isRedirect: true\n    }, isFetchActionRedirect ? {\n      _isFetchActionRedirect: true\n    } : {}));\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\"); // Check if this an absolute external redirect that goes to a new origin\n\n    if (ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser && typeof ((_window = window) == null ? void 0 : _window.location) !== \"undefined\") {\n      let url = init.history.createURL(redirect.location);\n      let isDifferentBasename = stripBasename(url.pathname, basename) == null;\n\n      if (window.location.origin !== url.origin || isDifferentBasename) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n\n        return;\n      }\n    } // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n\n    let {\n      formMethod,\n      formAction,\n      formEncType,\n      formData\n    } = state.navigation;\n\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData\n      };\n    } // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n\n\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && submission && isMutationMethod(submission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, submission, {\n          formAction: redirect.location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else if (isFetchActionRedirect) {\n      // For a fetch action redirect, we kick off a new loading navigation\n      // without the fetcher submission, but we send it along for shouldRevalidate\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined\n        },\n        fetcherSubmission: submission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename)), ...fetchersToLoad.map(f => {\n      if (f.matches && f.match && f.controller) {\n        return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename);\n      } else {\n        let error = {\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        };\n        return error;\n      }\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, fetchersToLoad.map(f => f.controller ? f.controller.signal : null), true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  } // Utility function to update blockers, ensuring valid state transitions\n\n\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER; // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    state.blockers.set(key, newBlocker);\n    updateState({\n      blockers: new Map(state.blockers)\n    });\n  }\n\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n\n    if (blockerFunctions.size === 0) {\n      return;\n    } // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n\n\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    } // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n\n\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n\n    getScrollRestorationKey = getKey || (location => location.key); // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n\n  async function query(request, _temp2) {\n    let {\n      requestContext\n    } = _temp2 === void 0 ? {} : _temp2;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n\n    if (isResponse(result)) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n\n\n  async function queryRoute(request, _temp3) {\n    let {\n      routeId,\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext, match);\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    } // Pick off the right state value to return\n\n\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      var _result$activeDeferre;\n\n      let data = Object.values(result.loaderData)[0];\n\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n\n        return e.response;\n      } // Redirects are always returned since they don't propagate to catch\n      // boundaries\n\n\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n\n      throw e;\n    }\n  }\n\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, true, isRouteRequest, requestContext);\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      }); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    } // Create a GET request for the loaders\n\n\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy); // Short circuit if we have no loaders to run (query())\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, true, isRouteRequest, requestContext))]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted\");\n    } // Process and commit output from loaders\n\n\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds); // Add a null for any non-loader matches for proper revalidation on the client\n\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n\n  return newContext;\n}\n\nfunction isSubmissionNavigation(opts) {\n  return opts != null && \"formData\" in opts;\n}\n\nfunction normalizeTo(location, matches, basename, prependBasename, to, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n\n  if (fromRouteId != null && relative !== \"path\") {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route.  When using relative:path,\n    // fromRouteId is ignored since that is always relative to the current\n    // location path\n    contextualMatches = [];\n\n    for (let match of matches) {\n      contextualMatches.push(match);\n\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  } // Resolve the relative path\n\n\n  let path = resolveTo(to ? to : \".\", getPathContributingMatches(contextualMatches).map(m => m.pathnameBase), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\"); // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  } // Add an ?index param for matched index routes if we don't already have one\n\n\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  } // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n\n\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  } // Create a Submission on non-GET navigations\n\n\n  let submission;\n\n  if (opts.formData) {\n    let formMethod = opts.formMethod || \"get\";\n    submission = {\n      formMethod: normalizeFormMethod ? formMethod.toUpperCase() : formMethod.toLowerCase(),\n      formAction: stripHashFromPath(path),\n      formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n      formData: opts.formData\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return {\n        path,\n        submission\n      };\n    }\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData); // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, pendingActionData, pendingError) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location); // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (match.route.loader == null) {\n      return false;\n    } // Always call the loader on new route instances and pending defer cancellations\n\n\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    } // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n\n\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate: // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired || // Clicked the same link, resubmitted a GET form\n      currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search || // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  }); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some(m => m.route.id === f.routeId)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename); // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n      return;\n    } // Revalidating fetchers are decoupled from the route matches since they\n    // hit a static href, so they _always_ check shouldRevalidate and the\n    // default is strictly if a revalidation is explicitly required (action\n    // submissions, useRevalidator, X-Remix-Revalidate).\n\n\n    let shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n      currentUrl,\n      currentParams: state.matches[state.matches.length - 1].params,\n      nextUrl,\n      nextParams: matches[matches.length - 1].params\n    }, submission, {\n      actionResult,\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      defaultShouldRevalidate: isRevalidationRequired\n    }));\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\n\n\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy(); // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\"); // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n\n  let routeUpdates = {};\n\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined && // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  } // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n\n\n  Object.assign(routeToUpdate, routeUpdates); // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\n\nasync function callLoaderOrAction(type, request, match, matches, manifest, mapRouteProperties, basename, isStaticRequest, isRouteRequest, requestContext) {\n  if (isStaticRequest === void 0) {\n    isStaticRequest = false;\n  }\n\n  if (isRouteRequest === void 0) {\n    isRouteRequest = false;\n  }\n\n  let resultType;\n  let result;\n  let onReject;\n\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    let abortPromise = new Promise((_, r) => reject = r);\n\n    onReject = () => reject();\n\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([handler({\n      request,\n      params: match.params,\n      context: requestContext\n    }), abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let values = await Promise.all([runHandler(handler), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        handler = match.route[type];\n\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            data: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status; // Process redirects\n\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\"); // Support relative routing in internal redirects\n\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location);\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      } // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n\n\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    } // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n\n\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result\n      };\n    }\n\n    let data;\n    let contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n\n  if (isDeferredData(result)) {\n    var _result$init, _result$init2;\n\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n\n  return {\n    type: ResultType.data,\n    data: result\n  };\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\n\n\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType,\n      formData\n    } = submission; // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {}; // Prefer higher error values if lower errors bubble to the same boundary\n\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      } // Clear our any prior loaderData for the throwing route\n\n\n      loaderData[id] = undefined; // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      } // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds); // Process results from our revalidating fetchers\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match,\n      controller\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData,\n    errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n\n  for (let match of matches) {\n    let id = match.route.id;\n\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\n\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\n\nfunction getInternalRouterError(status, _temp4) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp4 === void 0 ? {} : _temp4;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\n\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  } // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n\n\n  return false;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\n\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\n\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\n\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\n\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\n\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index]; // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n\n  let aborted = await result.deferredData.resolveData(signal);\n\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\n\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n} //#endregion\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename };\n//# sourceMappingURL=router.js.map\n"],"names":["_extends","target","i","source","key","Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","entry","index","createMemoryLocation","clampIndex","action","listener","n","getCurrentLocation","to","state","location","createLocation","warning","createHref","createPath","path","parsePath","nextLocation","delta","nextIndex","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","pathname","search","hash","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","createHashHref","base","href","url","hashIndex","validateHashLocation","invariant","value","message","cond","createKey","getHistoryState","current","_ref","parsedPath","searchIndex","getLocation","validateLocation","getIndex","handlePop","history","push","historyState","replace","createURL","ResultType","immutableRouteKeys","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","id","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","relativePath","meta","joinPaths","routesMeta","computeScore","_route$path","exploded","explodeOptionalSegments","segments","first","rest","isOptional","required","restExploded","result","subpath","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","score","segment","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","normalizePathname","generatePath","originalPath","params","prefix","array","keyMatch","optional","param","pattern","matcher","paramNames","compilePath","pathnameBase","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","caseSensitive","regexpSource","_","error","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","headers","AbortedDeferredError","DeferredData","reject","r","onAbort","acc","promise","aborted","settledKey","subscriber","v","k","signal","resolve","_ref2","unwrapTrackedPromise","isTrackedPromise","defer","redirect","ErrorResponse","status","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","IDLE_FETCHER","IDLE_BLOCKER","ABSOLUTE_URL_REGEX","isBrowser","isServer","defaultMapRouteProperties","createRouter","detectErrorBoundary","dataRoutes","inFlightDataRoutes","future","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","m","router","pendingAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","initialize","historyAction","blockerKey","shouldBlockNavigation","updateBlocker","deleteBlocker","updateState","startNavigation","dispose","deleteFetcher","subscribe","newState","completeNavigation","_location$state","_location$state2","isActionReload","isMutationMethod","actionData","loaderData","mergeLoaderData","preventScrollReset","getSavedScrollPosition","navigate","opts","normalizedPath","normalizeTo","submission","normalizeNavigateOptions","currentLocation","userReplace","revalidate","interruptActiveLoads","saveScrollPosition","routesToUse","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","pendingActionData","pendingError","findNearestBoundary","actionOutput","handleAction","shortCircuited","errors","handleLoaders","navigation","actionMatch","getTargetMatch","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","overrideNavigation","fetcherSubmission","activeSubmission","matchesToLoad","revalidatingFetchers","getMatchesToLoad","routeId","updatedFetchers","markFetchRedirectsDone","rf","fetcher","revalidatingFetcher","abortPendingFetchRevalidations","f","abortFetcher","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","processLoaderData","deferredData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","getFetcher","fetch","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","_temp","_window","isFetchActionRedirect","redirectLocation","isDifferentBasename","redirectHistoryAction","formMethod","formAction","formEncType","formData","currentMatches","fetchersToLoad","resolveDeferredResults","controller","markFetchersDone","keys","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalSetRoutes","newRoutes","UNSAFE_DEFERRED_SYMBOL","createStaticHandler","query","_temp2","requestContext","method","isValidMethod","methodNotAllowedMatches","queryImpl","isResponse","queryRoute","_temp3","_result$activeDeferre","routeMatch","submit","loadRouteData","e","isQueryRouteResponse","isRedirectResponse","isRouteRequest","context","loaderRequest","pendingActionError","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","getStaticContextFromError","isSubmissionNavigation","prependBasename","fromRouteId","relative","contextualMatches","activeRouteMatch","hasNakedIndexQuery","normalizeFormMethod","isFetcher","stripHashFromPath","searchParams","convertFormDataToSearchParams","boundaryId","boundaryMatches","currentUrl","nextUrl","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","isNewRouteInstance","fetcherMatches","fetcherMatch","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","isPropertyStaticallyDefined","type","isStaticRequest","resultType","onReject","runHandler","handler","abortPromise","isSameBasename","contentType","isDeferredData","_result$init","_result$init2","statusCode","foundError","loaderHeaders","newLoaderData","mergedLoaderData","_temp4","errorMessage","deferred","obj","signals","isRevalidatingLoader","unwrap","pathMatches"],"sourceRoot":""}